{"ast":null,"code":"import _classCallCheck from \"/Users/alaa.shabouni/Documents/Udacity/fend-neighborhood-map/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/alaa.shabouni/Documents/Udacity/fend-neighborhood-map/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alaa.shabouni/Documents/Udacity/fend-neighborhood-map/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alaa.shabouni/Documents/Udacity/fend-neighborhood-map/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/alaa.shabouni/Documents/Udacity/fend-neighborhood-map/src/components/MapDisplay.js\";\nimport React, { Component } from 'react';\nimport { Map, InfoWindow, GoogleApiWrapper } from 'google-maps-react';\nvar MAP_KEY = \"AIzaSyBi7tDyVzA7Ncf1kk-wCYxJrqDXd0qHUNs\";\n\nvar MapDisplay =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapDisplay, _Component);\n\n  function MapDisplay() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MapDisplay);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MapDisplay)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      map: null,\n      markers: [],\n      markerProps: [],\n      activeMarker: null,\n      activeMarkerProps: null,\n      showingInfoWindow: false\n    };\n\n    _this.componentDidMount = function () {};\n\n    _this.mapReady = function (props, map) {\n      // Save the map reference in state and prepare the location markers\n      _this.setState({\n        map: map\n      });\n      /*this.updateMarkers(this.props.locations);*/\n\n    };\n\n    _this.closeInfoWindow = function () {\n      // Disable any active marker animation\n      _this.state.activeMarker && _this.state.activeMarker.setAnimation(null);\n\n      _this.setState({\n        showingInfoWindow: false,\n        activeMarker: null,\n        activeMarkerProps: null\n      });\n    };\n\n    _this.onMarkerClick = function (props, marker, e) {\n      // Close any info window already open\n      _this.closeInfoWindow(); // Set the state to have the marker info show\n\n\n      _this.setState({\n        showingInfoWindow: true,\n        activeMarker: marker,\n        activeMarkerProps: props\n      });\n    };\n\n    _this.render = function () {\n      var style = {\n        width: '100%',\n        height: '100%'\n      };\n      var center = {\n        lat: _this.props.lat,\n        lng: _this.props.lon\n      };\n      var amProps = _this.state.activeMarkerProps;\n      return React.createElement(Map, {\n        role: \"application\",\n        \"aria-label\": \"map\",\n        onReady: _this.mapReady,\n        google: _this.props.google,\n        zoom: _this.props.zoom,\n        style: style,\n        initialCenter: center,\n        onClick: _this.closeInfoWindow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(InfoWindow, {\n        marker: _this.state.activeMarker,\n        visible: _this.state.showingInfoWindow,\n        onClose: _this.closeInfoWindow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, amProps && amProps.name), amProps && amProps.url ? React.createElement(\"a\", {\n        href: amProps.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"See website\") : \"\")));\n    };\n\n    return _this;\n  }\n\n  return MapDisplay;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: MAP_KEY\n})(MapDisplay);","map":{"version":3,"sources":["/Users/alaa.shabouni/Documents/Udacity/fend-neighborhood-map/src/components/MapDisplay.js"],"names":["React","Component","Map","InfoWindow","GoogleApiWrapper","MAP_KEY","MapDisplay","state","map","markers","markerProps","activeMarker","activeMarkerProps","showingInfoWindow","componentDidMount","mapReady","props","setState","closeInfoWindow","setAnimation","onMarkerClick","marker","e","render","style","width","height","center","lat","lng","lon","amProps","google","zoom","name","url","apiKey"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Map, InfoWindow, GoogleApiWrapper} from 'google-maps-react';\n\nconst MAP_KEY = \"AIzaSyBi7tDyVzA7Ncf1kk-wCYxJrqDXd0qHUNs\";\n\nclass MapDisplay extends Component {\n    state = {\n        map: null,\n        markers: [],\n        markerProps: [],\n        activeMarker: null,\n        activeMarkerProps: null,\n        showingInfoWindow: false\n    };\n\n    componentDidMount = () => {\n    }\n\n    mapReady = (props, map) => {\n        // Save the map reference in state and prepare the location markers\n        this.setState({map});\n        /*this.updateMarkers(this.props.locations);*/\n    }\n\n    closeInfoWindow = () => {\n        // Disable any active marker animation\n        this.state.activeMarker && this\n            .state\n            .activeMarker\n            .setAnimation(null);\n        this.setState({showingInfoWindow: false, activeMarker: null, activeMarkerProps: null});\n    }\n\n    onMarkerClick = (props, marker, e) => {\n        // Close any info window already open\n        this.closeInfoWindow();\n\n        // Set the state to have the marker info show\n        this.setState({showingInfoWindow: true, activeMarker: marker, activeMarkerProps: props});\n    }\n\n    /*updateMarkers = (locations) => {\n        // If all the locations have been filtered then we're done\n        if (!locations)\n            return;\n\n        // For any existing markers remove them from the map\n        this\n            .state\n            .markers\n            .forEach(marker => marker.setMap(null));\n\n        // Iterate over the locations to create parallel references to marker properties\n        // and the markers themselves that can be used for reference in interactions.\n        // Add the markers to the map along the way.\n        let markerProps = [];\n        let markers = locations.map((location, index) => {\n            let mProps = {\n                key: index,\n                index,\n                name: location.name,\n                position: location.pos,\n                url: location.url\n            };\n            markerProps.push(mProps);\n\n            let animation = this.props.google.maps.Animation.DROP;\n            let marker = new this.props.google.maps.Marker({\n                position: location.pos,\n                map: this.state.map,\n                animation\n            });\n            marker.addListener('click', () => {\n                this.onMarkerClick(mProps, marker, null);\n            });\n            return marker;\n        })\n\n        this.setState({markers, markerProps});\n    }*/\n\n    render = () => {\n        const style = {\n            width: '100%',\n            height: '100%'\n        }\n        const center = {\n            lat: this.props.lat,\n            lng: this.props.lon\n        }\n        let amProps = this.state.activeMarkerProps;\n\n        return (\n            <Map\n                role=\"application\"\n                aria-label=\"map\"\n                onReady={this.mapReady}\n                google={this.props.google}\n                zoom={this.props.zoom}\n                style={style}\n                initialCenter={center}\n                onClick={this.closeInfoWindow}>\n                <InfoWindow\n                    marker={this.state.activeMarker}\n                    visible={this.state.showingInfoWindow}\n                    onClose={this.closeInfoWindow}>\n                    <div>\n                        <h3>{amProps && amProps.name}</h3>\n                        {amProps && amProps.url\n                            ? (\n                                <a href={amProps.url}>See website</a>\n                            )\n                            : \"\"}\n\n                    </div>\n                </InfoWindow>\n            </Map>\n        )\n    }\n}\n\nexport default GoogleApiWrapper({apiKey: MAP_KEY})(MapDisplay)\n"]},"metadata":{},"sourceType":"module"}